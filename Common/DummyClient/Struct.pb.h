// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "Enum.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Struct_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_Struct_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_Struct_2eproto;
namespace Protocol {
class CharacterInfo;
struct CharacterInfoDefaultTypeInternal;
extern CharacterInfoDefaultTypeInternal _CharacterInfo_default_instance_;
class CreatureState;
struct CreatureStateDefaultTypeInternal;
extern CreatureStateDefaultTypeInternal _CreatureState_default_instance_;
class Player;
struct PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
}  // namespace Protocol
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace Protocol {

// ===================================================================


// -------------------------------------------------------------------

class CreatureState final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.CreatureState) */ {
 public:
  inline CreatureState() : CreatureState(nullptr) {}
  ~CreatureState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CreatureState(::google::protobuf::internal::ConstantInitialized);

  inline CreatureState(const CreatureState& from)
      : CreatureState(nullptr, from) {}
  CreatureState(CreatureState&& from) noexcept
    : CreatureState() {
    *this = ::std::move(from);
  }

  inline CreatureState& operator=(const CreatureState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatureState& operator=(CreatureState&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreatureState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreatureState* internal_default_instance() {
    return reinterpret_cast<const CreatureState*>(
               &_CreatureState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreatureState& a, CreatureState& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatureState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreatureState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreatureState* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreatureState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CreatureState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CreatureState& from) {
    CreatureState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CreatureState* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Protocol.CreatureState";
  }
  protected:
  explicit CreatureState(::google::protobuf::Arena* arena);
  CreatureState(::google::protobuf::Arena* arena, const CreatureState& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosXFieldNumber = 1,
    kPosYFieldNumber = 2,
    kBaseStateFieldNumber = 3,
    kMoveDirFieldNumber = 4,
  };
  // float posX = 1;
  void clear_posx() ;
  float posx() const;
  void set_posx(float value);

  private:
  float _internal_posx() const;
  void _internal_set_posx(float value);

  public:
  // float posY = 2;
  void clear_posy() ;
  float posy() const;
  void set_posy(float value);

  private:
  float _internal_posy() const;
  void _internal_set_posy(float value);

  public:
  // .Protocol.BaseState baseState = 3;
  void clear_basestate() ;
  ::Protocol::BaseState basestate() const;
  void set_basestate(::Protocol::BaseState value);

  private:
  ::Protocol::BaseState _internal_basestate() const;
  void _internal_set_basestate(::Protocol::BaseState value);

  public:
  // .Protocol.MoveDir moveDir = 4;
  void clear_movedir() ;
  ::Protocol::MoveDir movedir() const;
  void set_movedir(::Protocol::MoveDir value);

  private:
  ::Protocol::MoveDir _internal_movedir() const;
  void _internal_set_movedir(::Protocol::MoveDir value);

  public:
  // @@protoc_insertion_point(class_scope:Protocol.CreatureState)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    float posx_;
    float posy_;
    int basestate_;
    int movedir_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};// -------------------------------------------------------------------

class CharacterInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.CharacterInfo) */ {
 public:
  inline CharacterInfo() : CharacterInfo(nullptr) {}
  ~CharacterInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CharacterInfo(::google::protobuf::internal::ConstantInitialized);

  inline CharacterInfo(const CharacterInfo& from)
      : CharacterInfo(nullptr, from) {}
  CharacterInfo(CharacterInfo&& from) noexcept
    : CharacterInfo() {
    *this = ::std::move(from);
  }

  inline CharacterInfo& operator=(const CharacterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterInfo& operator=(CharacterInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterInfo* internal_default_instance() {
    return reinterpret_cast<const CharacterInfo*>(
               &_CharacterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CharacterInfo& a, CharacterInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CharacterInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CharacterInfo& from) {
    CharacterInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CharacterInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Protocol.CharacterInfo";
  }
  protected:
  explicit CharacterInfo(::google::protobuf::Arena* arena);
  CharacterInfo(::google::protobuf::Arena* arena, const CharacterInfo& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kCharacterIdFieldNumber = 1,
    kPlayerTypeFieldNumber = 2,
    kLevelFieldNumber = 4,
    kHpFieldNumber = 5,
    kExpFieldNumber = 6,
    kAttackFieldNumber = 7,
    kMapIdFieldNumber = 8,
  };
  // string name = 3;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // uint64 characterId = 1;
  void clear_characterid() ;
  ::uint64_t characterid() const;
  void set_characterid(::uint64_t value);

  private:
  ::uint64_t _internal_characterid() const;
  void _internal_set_characterid(::uint64_t value);

  public:
  // .Protocol.PlayerType playerType = 2;
  void clear_playertype() ;
  ::Protocol::PlayerType playertype() const;
  void set_playertype(::Protocol::PlayerType value);

  private:
  ::Protocol::PlayerType _internal_playertype() const;
  void _internal_set_playertype(::Protocol::PlayerType value);

  public:
  // uint32 level = 4;
  void clear_level() ;
  ::uint32_t level() const;
  void set_level(::uint32_t value);

  private:
  ::uint32_t _internal_level() const;
  void _internal_set_level(::uint32_t value);

  public:
  // int32 hp = 5;
  void clear_hp() ;
  ::int32_t hp() const;
  void set_hp(::int32_t value);

  private:
  ::int32_t _internal_hp() const;
  void _internal_set_hp(::int32_t value);

  public:
  // int32 exp = 6;
  void clear_exp() ;
  ::int32_t exp() const;
  void set_exp(::int32_t value);

  private:
  ::int32_t _internal_exp() const;
  void _internal_set_exp(::int32_t value);

  public:
  // uint32 attack = 7;
  void clear_attack() ;
  ::uint32_t attack() const;
  void set_attack(::uint32_t value);

  private:
  ::uint32_t _internal_attack() const;
  void _internal_set_attack(::uint32_t value);

  public:
  // uint32 mapId = 8;
  void clear_mapid() ;
  ::uint32_t mapid() const;
  void set_mapid(::uint32_t value);

  private:
  ::uint32_t _internal_mapid() const;
  void _internal_set_mapid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Protocol.CharacterInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 0,
      43, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::uint64_t characterid_;
    int playertype_;
    ::uint32_t level_;
    ::int32_t hp_;
    ::int32_t exp_;
    ::uint32_t attack_;
    ::uint32_t mapid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};// -------------------------------------------------------------------

class Player final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.Player) */ {
 public:
  inline Player() : Player(nullptr) {}
  ~Player() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Player(::google::protobuf::internal::ConstantInitialized);

  inline Player(const Player& from)
      : Player(nullptr, from) {}
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Player* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Player& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Player& from) {
    Player::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Player* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Protocol.Player";
  }
  protected:
  explicit Player(::google::protobuf::Arena* arena);
  Player(::google::protobuf::Arena* arena, const Player& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 4,
    kPlayerStateFieldNumber = 5,
    kPlayerIdFieldNumber = 1,
    kCharacterIdFieldNumber = 2,
    kPlayerTypeFieldNumber = 3,
  };
  // string name = 4;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .Protocol.CreatureState playerState = 5;
  bool has_playerstate() const;
  void clear_playerstate() ;
  const ::Protocol::CreatureState& playerstate() const;
  PROTOBUF_NODISCARD ::Protocol::CreatureState* release_playerstate();
  ::Protocol::CreatureState* mutable_playerstate();
  void set_allocated_playerstate(::Protocol::CreatureState* value);
  void unsafe_arena_set_allocated_playerstate(::Protocol::CreatureState* value);
  ::Protocol::CreatureState* unsafe_arena_release_playerstate();

  private:
  const ::Protocol::CreatureState& _internal_playerstate() const;
  ::Protocol::CreatureState* _internal_mutable_playerstate();

  public:
  // uint64 playerId = 1;
  void clear_playerid() ;
  ::uint64_t playerid() const;
  void set_playerid(::uint64_t value);

  private:
  ::uint64_t _internal_playerid() const;
  void _internal_set_playerid(::uint64_t value);

  public:
  // uint64 characterId = 2;
  void clear_characterid() ;
  ::uint64_t characterid() const;
  void set_characterid(::uint64_t value);

  private:
  ::uint64_t _internal_characterid() const;
  void _internal_set_characterid(::uint64_t value);

  public:
  // .Protocol.PlayerType playerType = 3;
  void clear_playertype() ;
  ::Protocol::PlayerType playertype() const;
  void set_playertype(::Protocol::PlayerType value);

  private:
  ::Protocol::PlayerType _internal_playertype() const;
  void _internal_set_playertype(::Protocol::PlayerType value);

  public:
  // @@protoc_insertion_point(class_scope:Protocol.Player)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      28, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::Protocol::CreatureState* playerstate_;
    ::uint64_t playerid_;
    ::uint64_t characterid_;
    int playertype_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CharacterInfo

// uint64 characterId = 1;
inline void CharacterInfo::clear_characterid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.characterid_ = ::uint64_t{0u};
}
inline ::uint64_t CharacterInfo::characterid() const {
  // @@protoc_insertion_point(field_get:Protocol.CharacterInfo.characterId)
  return _internal_characterid();
}
inline void CharacterInfo::set_characterid(::uint64_t value) {
  _internal_set_characterid(value);
  // @@protoc_insertion_point(field_set:Protocol.CharacterInfo.characterId)
}
inline ::uint64_t CharacterInfo::_internal_characterid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.characterid_;
}
inline void CharacterInfo::_internal_set_characterid(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.characterid_ = value;
}

// .Protocol.PlayerType playerType = 2;
inline void CharacterInfo::clear_playertype() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.playertype_ = 0;
}
inline ::Protocol::PlayerType CharacterInfo::playertype() const {
  // @@protoc_insertion_point(field_get:Protocol.CharacterInfo.playerType)
  return _internal_playertype();
}
inline void CharacterInfo::set_playertype(::Protocol::PlayerType value) {
  _internal_set_playertype(value);
  // @@protoc_insertion_point(field_set:Protocol.CharacterInfo.playerType)
}
inline ::Protocol::PlayerType CharacterInfo::_internal_playertype() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Protocol::PlayerType>(_impl_.playertype_);
}
inline void CharacterInfo::_internal_set_playertype(::Protocol::PlayerType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.playertype_ = value;
}

// string name = 3;
inline void CharacterInfo::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CharacterInfo::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Protocol.CharacterInfo.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CharacterInfo::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Protocol.CharacterInfo.name)
}
inline std::string* CharacterInfo::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Protocol.CharacterInfo.name)
  return _s;
}
inline const std::string& CharacterInfo::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void CharacterInfo::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* CharacterInfo::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* CharacterInfo::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Protocol.CharacterInfo.name)
  return _impl_.name_.Release();
}
inline void CharacterInfo::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.CharacterInfo.name)
}

// uint32 level = 4;
inline void CharacterInfo::clear_level() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.level_ = 0u;
}
inline ::uint32_t CharacterInfo::level() const {
  // @@protoc_insertion_point(field_get:Protocol.CharacterInfo.level)
  return _internal_level();
}
inline void CharacterInfo::set_level(::uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Protocol.CharacterInfo.level)
}
inline ::uint32_t CharacterInfo::_internal_level() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.level_;
}
inline void CharacterInfo::_internal_set_level(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.level_ = value;
}

// int32 hp = 5;
inline void CharacterInfo::clear_hp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.hp_ = 0;
}
inline ::int32_t CharacterInfo::hp() const {
  // @@protoc_insertion_point(field_get:Protocol.CharacterInfo.hp)
  return _internal_hp();
}
inline void CharacterInfo::set_hp(::int32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.CharacterInfo.hp)
}
inline ::int32_t CharacterInfo::_internal_hp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.hp_;
}
inline void CharacterInfo::_internal_set_hp(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.hp_ = value;
}

// int32 exp = 6;
inline void CharacterInfo::clear_exp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exp_ = 0;
}
inline ::int32_t CharacterInfo::exp() const {
  // @@protoc_insertion_point(field_get:Protocol.CharacterInfo.exp)
  return _internal_exp();
}
inline void CharacterInfo::set_exp(::int32_t value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:Protocol.CharacterInfo.exp)
}
inline ::int32_t CharacterInfo::_internal_exp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exp_;
}
inline void CharacterInfo::_internal_set_exp(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.exp_ = value;
}

// uint32 attack = 7;
inline void CharacterInfo::clear_attack() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.attack_ = 0u;
}
inline ::uint32_t CharacterInfo::attack() const {
  // @@protoc_insertion_point(field_get:Protocol.CharacterInfo.attack)
  return _internal_attack();
}
inline void CharacterInfo::set_attack(::uint32_t value) {
  _internal_set_attack(value);
  // @@protoc_insertion_point(field_set:Protocol.CharacterInfo.attack)
}
inline ::uint32_t CharacterInfo::_internal_attack() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.attack_;
}
inline void CharacterInfo::_internal_set_attack(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.attack_ = value;
}

// uint32 mapId = 8;
inline void CharacterInfo::clear_mapid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mapid_ = 0u;
}
inline ::uint32_t CharacterInfo::mapid() const {
  // @@protoc_insertion_point(field_get:Protocol.CharacterInfo.mapId)
  return _internal_mapid();
}
inline void CharacterInfo::set_mapid(::uint32_t value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:Protocol.CharacterInfo.mapId)
}
inline ::uint32_t CharacterInfo::_internal_mapid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mapid_;
}
inline void CharacterInfo::_internal_set_mapid(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.mapid_ = value;
}

// -------------------------------------------------------------------

// CreatureState

// float posX = 1;
inline void CreatureState::clear_posx() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.posx_ = 0;
}
inline float CreatureState::posx() const {
  // @@protoc_insertion_point(field_get:Protocol.CreatureState.posX)
  return _internal_posx();
}
inline void CreatureState::set_posx(float value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:Protocol.CreatureState.posX)
}
inline float CreatureState::_internal_posx() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.posx_;
}
inline void CreatureState::_internal_set_posx(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.posx_ = value;
}

// float posY = 2;
inline void CreatureState::clear_posy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.posy_ = 0;
}
inline float CreatureState::posy() const {
  // @@protoc_insertion_point(field_get:Protocol.CreatureState.posY)
  return _internal_posy();
}
inline void CreatureState::set_posy(float value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:Protocol.CreatureState.posY)
}
inline float CreatureState::_internal_posy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.posy_;
}
inline void CreatureState::_internal_set_posy(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.posy_ = value;
}

// .Protocol.BaseState baseState = 3;
inline void CreatureState::clear_basestate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.basestate_ = 0;
}
inline ::Protocol::BaseState CreatureState::basestate() const {
  // @@protoc_insertion_point(field_get:Protocol.CreatureState.baseState)
  return _internal_basestate();
}
inline void CreatureState::set_basestate(::Protocol::BaseState value) {
  _internal_set_basestate(value);
  // @@protoc_insertion_point(field_set:Protocol.CreatureState.baseState)
}
inline ::Protocol::BaseState CreatureState::_internal_basestate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Protocol::BaseState>(_impl_.basestate_);
}
inline void CreatureState::_internal_set_basestate(::Protocol::BaseState value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.basestate_ = value;
}

// .Protocol.MoveDir moveDir = 4;
inline void CreatureState::clear_movedir() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.movedir_ = 0;
}
inline ::Protocol::MoveDir CreatureState::movedir() const {
  // @@protoc_insertion_point(field_get:Protocol.CreatureState.moveDir)
  return _internal_movedir();
}
inline void CreatureState::set_movedir(::Protocol::MoveDir value) {
  _internal_set_movedir(value);
  // @@protoc_insertion_point(field_set:Protocol.CreatureState.moveDir)
}
inline ::Protocol::MoveDir CreatureState::_internal_movedir() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Protocol::MoveDir>(_impl_.movedir_);
}
inline void CreatureState::_internal_set_movedir(::Protocol::MoveDir value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.movedir_ = value;
}

// -------------------------------------------------------------------

// Player

// uint64 playerId = 1;
inline void Player::clear_playerid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.playerid_ = ::uint64_t{0u};
}
inline ::uint64_t Player::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.Player.playerId)
  return _internal_playerid();
}
inline void Player::set_playerid(::uint64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.Player.playerId)
}
inline ::uint64_t Player::_internal_playerid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.playerid_;
}
inline void Player::_internal_set_playerid(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.playerid_ = value;
}

// uint64 characterId = 2;
inline void Player::clear_characterid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.characterid_ = ::uint64_t{0u};
}
inline ::uint64_t Player::characterid() const {
  // @@protoc_insertion_point(field_get:Protocol.Player.characterId)
  return _internal_characterid();
}
inline void Player::set_characterid(::uint64_t value) {
  _internal_set_characterid(value);
  // @@protoc_insertion_point(field_set:Protocol.Player.characterId)
}
inline ::uint64_t Player::_internal_characterid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.characterid_;
}
inline void Player::_internal_set_characterid(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.characterid_ = value;
}

// .Protocol.PlayerType playerType = 3;
inline void Player::clear_playertype() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.playertype_ = 0;
}
inline ::Protocol::PlayerType Player::playertype() const {
  // @@protoc_insertion_point(field_get:Protocol.Player.playerType)
  return _internal_playertype();
}
inline void Player::set_playertype(::Protocol::PlayerType value) {
  _internal_set_playertype(value);
  // @@protoc_insertion_point(field_set:Protocol.Player.playerType)
}
inline ::Protocol::PlayerType Player::_internal_playertype() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Protocol::PlayerType>(_impl_.playertype_);
}
inline void Player::_internal_set_playertype(::Protocol::PlayerType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.playertype_ = value;
}

// string name = 4;
inline void Player::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Player::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Protocol.Player.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Player::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Protocol.Player.name)
}
inline std::string* Player::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Protocol.Player.name)
  return _s;
}
inline const std::string& Player::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Player::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Player::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Player::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Protocol.Player.name)
  return _impl_.name_.Release();
}
inline void Player::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.Player.name)
}

// .Protocol.CreatureState playerState = 5;
inline bool Player::has_playerstate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.playerstate_ != nullptr);
  return value;
}
inline void Player::clear_playerstate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.playerstate_ != nullptr) _impl_.playerstate_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Protocol::CreatureState& Player::_internal_playerstate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Protocol::CreatureState* p = _impl_.playerstate_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::CreatureState&>(::Protocol::_CreatureState_default_instance_);
}
inline const ::Protocol::CreatureState& Player::playerstate() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Protocol.Player.playerState)
  return _internal_playerstate();
}
inline void Player::unsafe_arena_set_allocated_playerstate(::Protocol::CreatureState* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.playerstate_);
  }
  _impl_.playerstate_ = reinterpret_cast<::Protocol::CreatureState*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.Player.playerState)
}
inline ::Protocol::CreatureState* Player::release_playerstate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Protocol::CreatureState* released = _impl_.playerstate_;
  _impl_.playerstate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Protocol::CreatureState* Player::unsafe_arena_release_playerstate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Protocol.Player.playerState)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Protocol::CreatureState* temp = _impl_.playerstate_;
  _impl_.playerstate_ = nullptr;
  return temp;
}
inline ::Protocol::CreatureState* Player::_internal_mutable_playerstate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.playerstate_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::CreatureState>(GetArena());
    _impl_.playerstate_ = reinterpret_cast<::Protocol::CreatureState*>(p);
  }
  return _impl_.playerstate_;
}
inline ::Protocol::CreatureState* Player::mutable_playerstate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::Protocol::CreatureState* _msg = _internal_mutable_playerstate();
  // @@protoc_insertion_point(field_mutable:Protocol.Player.playerState)
  return _msg;
}
inline void Player::set_allocated_playerstate(::Protocol::CreatureState* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::Protocol::CreatureState*>(_impl_.playerstate_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::Protocol::CreatureState*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.playerstate_ = reinterpret_cast<::Protocol::CreatureState*>(value);
  // @@protoc_insertion_point(field_set_allocated:Protocol.Player.playerState)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto_2epb_2eh
