// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "Enum.pb.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_Protocol_2eproto;
namespace Protocol {
class C_CHAT;
struct C_CHATDefaultTypeInternal;
extern C_CHATDefaultTypeInternal _C_CHAT_default_instance_;
class C_ENTER;
struct C_ENTERDefaultTypeInternal;
extern C_ENTERDefaultTypeInternal _C_ENTER_default_instance_;
class C_JUMP;
struct C_JUMPDefaultTypeInternal;
extern C_JUMPDefaultTypeInternal _C_JUMP_default_instance_;
class C_JUMP_END;
struct C_JUMP_ENDDefaultTypeInternal;
extern C_JUMP_ENDDefaultTypeInternal _C_JUMP_END_default_instance_;
class C_LEAVE;
struct C_LEAVEDefaultTypeInternal;
extern C_LEAVEDefaultTypeInternal _C_LEAVE_default_instance_;
class C_LOGIN;
struct C_LOGINDefaultTypeInternal;
extern C_LOGINDefaultTypeInternal _C_LOGIN_default_instance_;
class C_MOVE_END;
struct C_MOVE_ENDDefaultTypeInternal;
extern C_MOVE_ENDDefaultTypeInternal _C_MOVE_END_default_instance_;
class C_MOVE_START;
struct C_MOVE_STARTDefaultTypeInternal;
extern C_MOVE_STARTDefaultTypeInternal _C_MOVE_START_default_instance_;
class C_SKILL;
struct C_SKILLDefaultTypeInternal;
extern C_SKILLDefaultTypeInternal _C_SKILL_default_instance_;
class S_CHAT;
struct S_CHATDefaultTypeInternal;
extern S_CHATDefaultTypeInternal _S_CHAT_default_instance_;
class S_ENTER;
struct S_ENTERDefaultTypeInternal;
extern S_ENTERDefaultTypeInternal _S_ENTER_default_instance_;
class S_ENTER_MAP;
struct S_ENTER_MAPDefaultTypeInternal;
extern S_ENTER_MAPDefaultTypeInternal _S_ENTER_MAP_default_instance_;
class S_JUMP;
struct S_JUMPDefaultTypeInternal;
extern S_JUMPDefaultTypeInternal _S_JUMP_default_instance_;
class S_JUMP_END;
struct S_JUMP_ENDDefaultTypeInternal;
extern S_JUMP_ENDDefaultTypeInternal _S_JUMP_END_default_instance_;
class S_LEAVE;
struct S_LEAVEDefaultTypeInternal;
extern S_LEAVEDefaultTypeInternal _S_LEAVE_default_instance_;
class S_LOGIN;
struct S_LOGINDefaultTypeInternal;
extern S_LOGINDefaultTypeInternal _S_LOGIN_default_instance_;
class S_MOVE_END;
struct S_MOVE_ENDDefaultTypeInternal;
extern S_MOVE_ENDDefaultTypeInternal _S_MOVE_END_default_instance_;
class S_MOVE_START;
struct S_MOVE_STARTDefaultTypeInternal;
extern S_MOVE_STARTDefaultTypeInternal _S_MOVE_START_default_instance_;
class S_SKILL;
struct S_SKILLDefaultTypeInternal;
extern S_SKILLDefaultTypeInternal _S_SKILL_default_instance_;
}  // namespace Protocol
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace Protocol {

// ===================================================================


// -------------------------------------------------------------------

class S_LEAVE final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.S_LEAVE) */ {
 public:
  inline S_LEAVE() : S_LEAVE(nullptr) {}
  ~S_LEAVE() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR S_LEAVE(::google::protobuf::internal::ConstantInitialized);

  inline S_LEAVE(const S_LEAVE& from)
      : S_LEAVE(nullptr, from) {}
  S_LEAVE(S_LEAVE&& from) noexcept
    : S_LEAVE() {
    *this = ::std::move(from);
  }

  inline S_LEAVE& operator=(const S_LEAVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LEAVE& operator=(S_LEAVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LEAVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LEAVE* internal_default_instance() {
    return reinterpret_cast<const S_LEAVE*>(
               &_S_LEAVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(S_LEAVE& a, S_LEAVE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LEAVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LEAVE* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_LEAVE* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_LEAVE>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const S_LEAVE& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const S_LEAVE& from) {
    S_LEAVE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(S_LEAVE* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Protocol.S_LEAVE";
  }
  protected:
  explicit S_LEAVE(::google::protobuf::Arena* arena);
  S_LEAVE(::google::protobuf::Arena* arena, const S_LEAVE& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // uint64 playerId = 1;
  void clear_playerid() ;
  ::uint64_t playerid() const;
  void set_playerid(::uint64_t value);

  private:
  ::uint64_t _internal_playerid() const;
  void _internal_set_playerid(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:Protocol.S_LEAVE)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint64_t playerid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class S_CHAT final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CHAT) */ {
 public:
  inline S_CHAT() : S_CHAT(nullptr) {}
  ~S_CHAT() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR S_CHAT(::google::protobuf::internal::ConstantInitialized);

  inline S_CHAT(const S_CHAT& from)
      : S_CHAT(nullptr, from) {}
  S_CHAT(S_CHAT&& from) noexcept
    : S_CHAT() {
    *this = ::std::move(from);
  }

  inline S_CHAT& operator=(const S_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CHAT& operator=(S_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CHAT* internal_default_instance() {
    return reinterpret_cast<const S_CHAT*>(
               &_S_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_CHAT& a, S_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CHAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CHAT* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_CHAT* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_CHAT>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const S_CHAT& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const S_CHAT& from) {
    S_CHAT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(S_CHAT* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Protocol.S_CHAT";
  }
  protected:
  explicit S_CHAT(::google::protobuf::Arena* arena);
  S_CHAT(::google::protobuf::Arena* arena, const S_CHAT& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg() ;
  const std::string& msg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_msg(Arg_&& arg, Args_... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* value);

  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(
      const std::string& value);
  std::string* _internal_mutable_msg();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:Protocol.S_CHAT)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      27, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr msg_;
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class C_LOGIN final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.C_LOGIN) */ {
 public:
  inline C_LOGIN() : C_LOGIN(nullptr) {}
  ~C_LOGIN() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR C_LOGIN(::google::protobuf::internal::ConstantInitialized);

  inline C_LOGIN(const C_LOGIN& from)
      : C_LOGIN(nullptr, from) {}
  C_LOGIN(C_LOGIN&& from) noexcept
    : C_LOGIN() {
    *this = ::std::move(from);
  }

  inline C_LOGIN& operator=(const C_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LOGIN& operator=(C_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LOGIN* internal_default_instance() {
    return reinterpret_cast<const C_LOGIN*>(
               &_C_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C_LOGIN& a, C_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LOGIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LOGIN* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_LOGIN* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_LOGIN>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const C_LOGIN& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const C_LOGIN& from) {
    C_LOGIN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(C_LOGIN* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Protocol.C_LOGIN";
  }
  protected:
  explicit C_LOGIN(::google::protobuf::Arena* arena);
  C_LOGIN(::google::protobuf::Arena* arena, const C_LOGIN& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPwFieldNumber = 2,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string pw = 2;
  void clear_pw() ;
  const std::string& pw() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pw(Arg_&& arg, Args_... args);
  std::string* mutable_pw();
  PROTOBUF_NODISCARD std::string* release_pw();
  void set_allocated_pw(std::string* value);

  private:
  const std::string& _internal_pw() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pw(
      const std::string& value);
  std::string* _internal_mutable_pw();

  public:
  // @@protoc_insertion_point(class_scope:Protocol.C_LOGIN)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      29, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr pw_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class C_LEAVE final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C_LEAVE) */ {
 public:
  inline C_LEAVE() : C_LEAVE(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR C_LEAVE(::google::protobuf::internal::ConstantInitialized);

  inline C_LEAVE(const C_LEAVE& from)
      : C_LEAVE(nullptr, from) {}
  C_LEAVE(C_LEAVE&& from) noexcept
    : C_LEAVE() {
    *this = ::std::move(from);
  }

  inline C_LEAVE& operator=(const C_LEAVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LEAVE& operator=(C_LEAVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LEAVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LEAVE* internal_default_instance() {
    return reinterpret_cast<const C_LEAVE*>(
               &_C_LEAVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(C_LEAVE& a, C_LEAVE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LEAVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LEAVE* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_LEAVE* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_LEAVE>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C_LEAVE& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C_LEAVE& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Protocol.C_LEAVE";
  }
  protected:
  explicit C_LEAVE(::google::protobuf::Arena* arena);
  C_LEAVE(::google::protobuf::Arena* arena, const C_LEAVE& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_LEAVE)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class C_ENTER final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ENTER) */ {
 public:
  inline C_ENTER() : C_ENTER(nullptr) {}
  ~C_ENTER() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR C_ENTER(::google::protobuf::internal::ConstantInitialized);

  inline C_ENTER(const C_ENTER& from)
      : C_ENTER(nullptr, from) {}
  C_ENTER(C_ENTER&& from) noexcept
    : C_ENTER() {
    *this = ::std::move(from);
  }

  inline C_ENTER& operator=(const C_ENTER& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ENTER& operator=(C_ENTER&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ENTER& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ENTER* internal_default_instance() {
    return reinterpret_cast<const C_ENTER*>(
               &_C_ENTER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(C_ENTER& a, C_ENTER& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ENTER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ENTER* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_ENTER* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_ENTER>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const C_ENTER& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const C_ENTER& from) {
    C_ENTER::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(C_ENTER* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Protocol.C_ENTER";
  }
  protected:
  explicit C_ENTER(::google::protobuf::Arena* arena);
  C_ENTER(::google::protobuf::Arena* arena, const C_ENTER& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterIdFieldNumber = 1,
  };
  // uint64 characterId = 1;
  void clear_characterid() ;
  ::uint64_t characterid() const;
  void set_characterid(::uint64_t value);

  private:
  ::uint64_t _internal_characterid() const;
  void _internal_set_characterid(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:Protocol.C_ENTER)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint64_t characterid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class C_CHAT final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.C_CHAT) */ {
 public:
  inline C_CHAT() : C_CHAT(nullptr) {}
  ~C_CHAT() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR C_CHAT(::google::protobuf::internal::ConstantInitialized);

  inline C_CHAT(const C_CHAT& from)
      : C_CHAT(nullptr, from) {}
  C_CHAT(C_CHAT&& from) noexcept
    : C_CHAT() {
    *this = ::std::move(from);
  }

  inline C_CHAT& operator=(const C_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CHAT& operator=(C_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CHAT* internal_default_instance() {
    return reinterpret_cast<const C_CHAT*>(
               &_C_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_CHAT& a, C_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CHAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CHAT* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_CHAT* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_CHAT>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const C_CHAT& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const C_CHAT& from) {
    C_CHAT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(C_CHAT* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Protocol.C_CHAT";
  }
  protected:
  explicit C_CHAT(::google::protobuf::Arena* arena);
  C_CHAT(::google::protobuf::Arena* arena, const C_CHAT& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // string msg = 1;
  void clear_msg() ;
  const std::string& msg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_msg(Arg_&& arg, Args_... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* value);

  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(
      const std::string& value);
  std::string* _internal_mutable_msg();

  public:
  // @@protoc_insertion_point(class_scope:Protocol.C_CHAT)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      27, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr msg_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class S_SKILL final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SKILL) */ {
 public:
  inline S_SKILL() : S_SKILL(nullptr) {}
  ~S_SKILL() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR S_SKILL(::google::protobuf::internal::ConstantInitialized);

  inline S_SKILL(const S_SKILL& from)
      : S_SKILL(nullptr, from) {}
  S_SKILL(S_SKILL&& from) noexcept
    : S_SKILL() {
    *this = ::std::move(from);
  }

  inline S_SKILL& operator=(const S_SKILL& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SKILL& operator=(S_SKILL&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SKILL& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SKILL* internal_default_instance() {
    return reinterpret_cast<const S_SKILL*>(
               &_S_SKILL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(S_SKILL& a, S_SKILL& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SKILL* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SKILL* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_SKILL* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_SKILL>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const S_SKILL& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const S_SKILL& from) {
    S_SKILL::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(S_SKILL* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Protocol.S_SKILL";
  }
  protected:
  explicit S_SKILL(::google::protobuf::Arena* arena);
  S_SKILL(::google::protobuf::Arena* arena, const S_SKILL& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 3,
    kPlayerIdFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // .Protocol.CreatureState state = 3;
  bool has_state() const;
  void clear_state() ;
  const ::Protocol::CreatureState& state() const;
  PROTOBUF_NODISCARD ::Protocol::CreatureState* release_state();
  ::Protocol::CreatureState* mutable_state();
  void set_allocated_state(::Protocol::CreatureState* value);
  void unsafe_arena_set_allocated_state(::Protocol::CreatureState* value);
  ::Protocol::CreatureState* unsafe_arena_release_state();

  private:
  const ::Protocol::CreatureState& _internal_state() const;
  ::Protocol::CreatureState* _internal_mutable_state();

  public:
  // uint64 playerId = 2;
  void clear_playerid() ;
  ::uint64_t playerid() const;
  void set_playerid(::uint64_t value);

  private:
  ::uint64_t _internal_playerid() const;
  void _internal_set_playerid(::uint64_t value);

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:Protocol.S_SKILL)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::Protocol::CreatureState* state_;
    ::uint64_t playerid_;
    bool success_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class S_MOVE_START final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.S_MOVE_START) */ {
 public:
  inline S_MOVE_START() : S_MOVE_START(nullptr) {}
  ~S_MOVE_START() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR S_MOVE_START(::google::protobuf::internal::ConstantInitialized);

  inline S_MOVE_START(const S_MOVE_START& from)
      : S_MOVE_START(nullptr, from) {}
  S_MOVE_START(S_MOVE_START&& from) noexcept
    : S_MOVE_START() {
    *this = ::std::move(from);
  }

  inline S_MOVE_START& operator=(const S_MOVE_START& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MOVE_START& operator=(S_MOVE_START&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MOVE_START& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MOVE_START* internal_default_instance() {
    return reinterpret_cast<const S_MOVE_START*>(
               &_S_MOVE_START_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(S_MOVE_START& a, S_MOVE_START& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MOVE_START* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MOVE_START* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_MOVE_START* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_MOVE_START>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const S_MOVE_START& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const S_MOVE_START& from) {
    S_MOVE_START::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(S_MOVE_START* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Protocol.S_MOVE_START";
  }
  protected:
  explicit S_MOVE_START(::google::protobuf::Arena* arena);
  S_MOVE_START(::google::protobuf::Arena* arena, const S_MOVE_START& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // .Protocol.CreatureState state = 2;
  bool has_state() const;
  void clear_state() ;
  const ::Protocol::CreatureState& state() const;
  PROTOBUF_NODISCARD ::Protocol::CreatureState* release_state();
  ::Protocol::CreatureState* mutable_state();
  void set_allocated_state(::Protocol::CreatureState* value);
  void unsafe_arena_set_allocated_state(::Protocol::CreatureState* value);
  ::Protocol::CreatureState* unsafe_arena_release_state();

  private:
  const ::Protocol::CreatureState& _internal_state() const;
  ::Protocol::CreatureState* _internal_mutable_state();

  public:
  // uint64 playerId = 1;
  void clear_playerid() ;
  ::uint64_t playerid() const;
  void set_playerid(::uint64_t value);

  private:
  ::uint64_t _internal_playerid() const;
  void _internal_set_playerid(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:Protocol.S_MOVE_START)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::Protocol::CreatureState* state_;
    ::uint64_t playerid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class S_MOVE_END final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.S_MOVE_END) */ {
 public:
  inline S_MOVE_END() : S_MOVE_END(nullptr) {}
  ~S_MOVE_END() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR S_MOVE_END(::google::protobuf::internal::ConstantInitialized);

  inline S_MOVE_END(const S_MOVE_END& from)
      : S_MOVE_END(nullptr, from) {}
  S_MOVE_END(S_MOVE_END&& from) noexcept
    : S_MOVE_END() {
    *this = ::std::move(from);
  }

  inline S_MOVE_END& operator=(const S_MOVE_END& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MOVE_END& operator=(S_MOVE_END&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MOVE_END& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MOVE_END* internal_default_instance() {
    return reinterpret_cast<const S_MOVE_END*>(
               &_S_MOVE_END_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(S_MOVE_END& a, S_MOVE_END& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MOVE_END* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MOVE_END* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_MOVE_END* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_MOVE_END>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const S_MOVE_END& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const S_MOVE_END& from) {
    S_MOVE_END::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(S_MOVE_END* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Protocol.S_MOVE_END";
  }
  protected:
  explicit S_MOVE_END(::google::protobuf::Arena* arena);
  S_MOVE_END(::google::protobuf::Arena* arena, const S_MOVE_END& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // .Protocol.CreatureState state = 2;
  bool has_state() const;
  void clear_state() ;
  const ::Protocol::CreatureState& state() const;
  PROTOBUF_NODISCARD ::Protocol::CreatureState* release_state();
  ::Protocol::CreatureState* mutable_state();
  void set_allocated_state(::Protocol::CreatureState* value);
  void unsafe_arena_set_allocated_state(::Protocol::CreatureState* value);
  ::Protocol::CreatureState* unsafe_arena_release_state();

  private:
  const ::Protocol::CreatureState& _internal_state() const;
  ::Protocol::CreatureState* _internal_mutable_state();

  public:
  // uint64 playerId = 1;
  void clear_playerid() ;
  ::uint64_t playerid() const;
  void set_playerid(::uint64_t value);

  private:
  ::uint64_t _internal_playerid() const;
  void _internal_set_playerid(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:Protocol.S_MOVE_END)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::Protocol::CreatureState* state_;
    ::uint64_t playerid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class S_LOGIN final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.S_LOGIN) */ {
 public:
  inline S_LOGIN() : S_LOGIN(nullptr) {}
  ~S_LOGIN() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR S_LOGIN(::google::protobuf::internal::ConstantInitialized);

  inline S_LOGIN(const S_LOGIN& from)
      : S_LOGIN(nullptr, from) {}
  S_LOGIN(S_LOGIN&& from) noexcept
    : S_LOGIN() {
    *this = ::std::move(from);
  }

  inline S_LOGIN& operator=(const S_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LOGIN& operator=(S_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LOGIN* internal_default_instance() {
    return reinterpret_cast<const S_LOGIN*>(
               &_S_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S_LOGIN& a, S_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LOGIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LOGIN* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_LOGIN* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_LOGIN>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const S_LOGIN& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const S_LOGIN& from) {
    S_LOGIN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(S_LOGIN* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Protocol.S_LOGIN";
  }
  protected:
  explicit S_LOGIN(::google::protobuf::Arena* arena);
  S_LOGIN(::google::protobuf::Arena* arena, const S_LOGIN& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChractersFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // repeated .Protocol.CharacterInfo chracters = 2;
  int chracters_size() const;
  private:
  int _internal_chracters_size() const;

  public:
  void clear_chracters() ;
  ::Protocol::CharacterInfo* mutable_chracters(int index);
  ::google::protobuf::RepeatedPtrField< ::Protocol::CharacterInfo >*
      mutable_chracters();
  private:
  const ::google::protobuf::RepeatedPtrField<::Protocol::CharacterInfo>& _internal_chracters() const;
  ::google::protobuf::RepeatedPtrField<::Protocol::CharacterInfo>* _internal_mutable_chracters();
  public:
  const ::Protocol::CharacterInfo& chracters(int index) const;
  ::Protocol::CharacterInfo* add_chracters();
  const ::google::protobuf::RepeatedPtrField< ::Protocol::CharacterInfo >&
      chracters() const;
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:Protocol.S_LOGIN)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::Protocol::CharacterInfo > chracters_;
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class S_JUMP_END final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.S_JUMP_END) */ {
 public:
  inline S_JUMP_END() : S_JUMP_END(nullptr) {}
  ~S_JUMP_END() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR S_JUMP_END(::google::protobuf::internal::ConstantInitialized);

  inline S_JUMP_END(const S_JUMP_END& from)
      : S_JUMP_END(nullptr, from) {}
  S_JUMP_END(S_JUMP_END&& from) noexcept
    : S_JUMP_END() {
    *this = ::std::move(from);
  }

  inline S_JUMP_END& operator=(const S_JUMP_END& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_JUMP_END& operator=(S_JUMP_END&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_JUMP_END& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_JUMP_END* internal_default_instance() {
    return reinterpret_cast<const S_JUMP_END*>(
               &_S_JUMP_END_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(S_JUMP_END& a, S_JUMP_END& b) {
    a.Swap(&b);
  }
  inline void Swap(S_JUMP_END* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_JUMP_END* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_JUMP_END* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_JUMP_END>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const S_JUMP_END& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const S_JUMP_END& from) {
    S_JUMP_END::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(S_JUMP_END* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Protocol.S_JUMP_END";
  }
  protected:
  explicit S_JUMP_END(::google::protobuf::Arena* arena);
  S_JUMP_END(::google::protobuf::Arena* arena, const S_JUMP_END& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // .Protocol.CreatureState state = 2;
  bool has_state() const;
  void clear_state() ;
  const ::Protocol::CreatureState& state() const;
  PROTOBUF_NODISCARD ::Protocol::CreatureState* release_state();
  ::Protocol::CreatureState* mutable_state();
  void set_allocated_state(::Protocol::CreatureState* value);
  void unsafe_arena_set_allocated_state(::Protocol::CreatureState* value);
  ::Protocol::CreatureState* unsafe_arena_release_state();

  private:
  const ::Protocol::CreatureState& _internal_state() const;
  ::Protocol::CreatureState* _internal_mutable_state();

  public:
  // uint64 playerId = 1;
  void clear_playerid() ;
  ::uint64_t playerid() const;
  void set_playerid(::uint64_t value);

  private:
  ::uint64_t _internal_playerid() const;
  void _internal_set_playerid(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:Protocol.S_JUMP_END)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::Protocol::CreatureState* state_;
    ::uint64_t playerid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class S_JUMP final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.S_JUMP) */ {
 public:
  inline S_JUMP() : S_JUMP(nullptr) {}
  ~S_JUMP() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR S_JUMP(::google::protobuf::internal::ConstantInitialized);

  inline S_JUMP(const S_JUMP& from)
      : S_JUMP(nullptr, from) {}
  S_JUMP(S_JUMP&& from) noexcept
    : S_JUMP() {
    *this = ::std::move(from);
  }

  inline S_JUMP& operator=(const S_JUMP& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_JUMP& operator=(S_JUMP&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_JUMP& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_JUMP* internal_default_instance() {
    return reinterpret_cast<const S_JUMP*>(
               &_S_JUMP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(S_JUMP& a, S_JUMP& b) {
    a.Swap(&b);
  }
  inline void Swap(S_JUMP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_JUMP* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_JUMP* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_JUMP>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const S_JUMP& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const S_JUMP& from) {
    S_JUMP::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(S_JUMP* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Protocol.S_JUMP";
  }
  protected:
  explicit S_JUMP(::google::protobuf::Arena* arena);
  S_JUMP(::google::protobuf::Arena* arena, const S_JUMP& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 3,
    kPlayerIdFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // .Protocol.CreatureState state = 3;
  bool has_state() const;
  void clear_state() ;
  const ::Protocol::CreatureState& state() const;
  PROTOBUF_NODISCARD ::Protocol::CreatureState* release_state();
  ::Protocol::CreatureState* mutable_state();
  void set_allocated_state(::Protocol::CreatureState* value);
  void unsafe_arena_set_allocated_state(::Protocol::CreatureState* value);
  ::Protocol::CreatureState* unsafe_arena_release_state();

  private:
  const ::Protocol::CreatureState& _internal_state() const;
  ::Protocol::CreatureState* _internal_mutable_state();

  public:
  // uint64 playerId = 2;
  void clear_playerid() ;
  ::uint64_t playerid() const;
  void set_playerid(::uint64_t value);

  private:
  ::uint64_t _internal_playerid() const;
  void _internal_set_playerid(::uint64_t value);

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:Protocol.S_JUMP)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::Protocol::CreatureState* state_;
    ::uint64_t playerid_;
    bool success_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class C_SKILL final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.C_SKILL) */ {
 public:
  inline C_SKILL() : C_SKILL(nullptr) {}
  ~C_SKILL() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR C_SKILL(::google::protobuf::internal::ConstantInitialized);

  inline C_SKILL(const C_SKILL& from)
      : C_SKILL(nullptr, from) {}
  C_SKILL(C_SKILL&& from) noexcept
    : C_SKILL() {
    *this = ::std::move(from);
  }

  inline C_SKILL& operator=(const C_SKILL& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_SKILL& operator=(C_SKILL&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_SKILL& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_SKILL* internal_default_instance() {
    return reinterpret_cast<const C_SKILL*>(
               &_C_SKILL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(C_SKILL& a, C_SKILL& b) {
    a.Swap(&b);
  }
  inline void Swap(C_SKILL* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_SKILL* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_SKILL* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_SKILL>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const C_SKILL& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const C_SKILL& from) {
    C_SKILL::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(C_SKILL* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Protocol.C_SKILL";
  }
  protected:
  explicit C_SKILL(::google::protobuf::Arena* arena);
  C_SKILL(::google::protobuf::Arena* arena, const C_SKILL& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // .Protocol.CreatureState state = 1;
  bool has_state() const;
  void clear_state() ;
  const ::Protocol::CreatureState& state() const;
  PROTOBUF_NODISCARD ::Protocol::CreatureState* release_state();
  ::Protocol::CreatureState* mutable_state();
  void set_allocated_state(::Protocol::CreatureState* value);
  void unsafe_arena_set_allocated_state(::Protocol::CreatureState* value);
  ::Protocol::CreatureState* unsafe_arena_release_state();

  private:
  const ::Protocol::CreatureState& _internal_state() const;
  ::Protocol::CreatureState* _internal_mutable_state();

  public:
  // @@protoc_insertion_point(class_scope:Protocol.C_SKILL)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::Protocol::CreatureState* state_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class C_MOVE_START final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.C_MOVE_START) */ {
 public:
  inline C_MOVE_START() : C_MOVE_START(nullptr) {}
  ~C_MOVE_START() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR C_MOVE_START(::google::protobuf::internal::ConstantInitialized);

  inline C_MOVE_START(const C_MOVE_START& from)
      : C_MOVE_START(nullptr, from) {}
  C_MOVE_START(C_MOVE_START&& from) noexcept
    : C_MOVE_START() {
    *this = ::std::move(from);
  }

  inline C_MOVE_START& operator=(const C_MOVE_START& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_MOVE_START& operator=(C_MOVE_START&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_MOVE_START& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_MOVE_START* internal_default_instance() {
    return reinterpret_cast<const C_MOVE_START*>(
               &_C_MOVE_START_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(C_MOVE_START& a, C_MOVE_START& b) {
    a.Swap(&b);
  }
  inline void Swap(C_MOVE_START* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_MOVE_START* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_MOVE_START* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_MOVE_START>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const C_MOVE_START& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const C_MOVE_START& from) {
    C_MOVE_START::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(C_MOVE_START* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Protocol.C_MOVE_START";
  }
  protected:
  explicit C_MOVE_START(::google::protobuf::Arena* arena);
  C_MOVE_START(::google::protobuf::Arena* arena, const C_MOVE_START& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // .Protocol.CreatureState state = 1;
  bool has_state() const;
  void clear_state() ;
  const ::Protocol::CreatureState& state() const;
  PROTOBUF_NODISCARD ::Protocol::CreatureState* release_state();
  ::Protocol::CreatureState* mutable_state();
  void set_allocated_state(::Protocol::CreatureState* value);
  void unsafe_arena_set_allocated_state(::Protocol::CreatureState* value);
  ::Protocol::CreatureState* unsafe_arena_release_state();

  private:
  const ::Protocol::CreatureState& _internal_state() const;
  ::Protocol::CreatureState* _internal_mutable_state();

  public:
  // @@protoc_insertion_point(class_scope:Protocol.C_MOVE_START)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::Protocol::CreatureState* state_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class C_MOVE_END final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.C_MOVE_END) */ {
 public:
  inline C_MOVE_END() : C_MOVE_END(nullptr) {}
  ~C_MOVE_END() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR C_MOVE_END(::google::protobuf::internal::ConstantInitialized);

  inline C_MOVE_END(const C_MOVE_END& from)
      : C_MOVE_END(nullptr, from) {}
  C_MOVE_END(C_MOVE_END&& from) noexcept
    : C_MOVE_END() {
    *this = ::std::move(from);
  }

  inline C_MOVE_END& operator=(const C_MOVE_END& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_MOVE_END& operator=(C_MOVE_END&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_MOVE_END& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_MOVE_END* internal_default_instance() {
    return reinterpret_cast<const C_MOVE_END*>(
               &_C_MOVE_END_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(C_MOVE_END& a, C_MOVE_END& b) {
    a.Swap(&b);
  }
  inline void Swap(C_MOVE_END* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_MOVE_END* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_MOVE_END* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_MOVE_END>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const C_MOVE_END& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const C_MOVE_END& from) {
    C_MOVE_END::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(C_MOVE_END* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Protocol.C_MOVE_END";
  }
  protected:
  explicit C_MOVE_END(::google::protobuf::Arena* arena);
  C_MOVE_END(::google::protobuf::Arena* arena, const C_MOVE_END& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // .Protocol.CreatureState state = 1;
  bool has_state() const;
  void clear_state() ;
  const ::Protocol::CreatureState& state() const;
  PROTOBUF_NODISCARD ::Protocol::CreatureState* release_state();
  ::Protocol::CreatureState* mutable_state();
  void set_allocated_state(::Protocol::CreatureState* value);
  void unsafe_arena_set_allocated_state(::Protocol::CreatureState* value);
  ::Protocol::CreatureState* unsafe_arena_release_state();

  private:
  const ::Protocol::CreatureState& _internal_state() const;
  ::Protocol::CreatureState* _internal_mutable_state();

  public:
  // @@protoc_insertion_point(class_scope:Protocol.C_MOVE_END)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::Protocol::CreatureState* state_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class C_JUMP_END final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.C_JUMP_END) */ {
 public:
  inline C_JUMP_END() : C_JUMP_END(nullptr) {}
  ~C_JUMP_END() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR C_JUMP_END(::google::protobuf::internal::ConstantInitialized);

  inline C_JUMP_END(const C_JUMP_END& from)
      : C_JUMP_END(nullptr, from) {}
  C_JUMP_END(C_JUMP_END&& from) noexcept
    : C_JUMP_END() {
    *this = ::std::move(from);
  }

  inline C_JUMP_END& operator=(const C_JUMP_END& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_JUMP_END& operator=(C_JUMP_END&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_JUMP_END& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_JUMP_END* internal_default_instance() {
    return reinterpret_cast<const C_JUMP_END*>(
               &_C_JUMP_END_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(C_JUMP_END& a, C_JUMP_END& b) {
    a.Swap(&b);
  }
  inline void Swap(C_JUMP_END* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_JUMP_END* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_JUMP_END* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_JUMP_END>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const C_JUMP_END& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const C_JUMP_END& from) {
    C_JUMP_END::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(C_JUMP_END* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Protocol.C_JUMP_END";
  }
  protected:
  explicit C_JUMP_END(::google::protobuf::Arena* arena);
  C_JUMP_END(::google::protobuf::Arena* arena, const C_JUMP_END& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // .Protocol.CreatureState state = 1;
  bool has_state() const;
  void clear_state() ;
  const ::Protocol::CreatureState& state() const;
  PROTOBUF_NODISCARD ::Protocol::CreatureState* release_state();
  ::Protocol::CreatureState* mutable_state();
  void set_allocated_state(::Protocol::CreatureState* value);
  void unsafe_arena_set_allocated_state(::Protocol::CreatureState* value);
  ::Protocol::CreatureState* unsafe_arena_release_state();

  private:
  const ::Protocol::CreatureState& _internal_state() const;
  ::Protocol::CreatureState* _internal_mutable_state();

  public:
  // @@protoc_insertion_point(class_scope:Protocol.C_JUMP_END)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::Protocol::CreatureState* state_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class C_JUMP final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.C_JUMP) */ {
 public:
  inline C_JUMP() : C_JUMP(nullptr) {}
  ~C_JUMP() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR C_JUMP(::google::protobuf::internal::ConstantInitialized);

  inline C_JUMP(const C_JUMP& from)
      : C_JUMP(nullptr, from) {}
  C_JUMP(C_JUMP&& from) noexcept
    : C_JUMP() {
    *this = ::std::move(from);
  }

  inline C_JUMP& operator=(const C_JUMP& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_JUMP& operator=(C_JUMP&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_JUMP& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_JUMP* internal_default_instance() {
    return reinterpret_cast<const C_JUMP*>(
               &_C_JUMP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(C_JUMP& a, C_JUMP& b) {
    a.Swap(&b);
  }
  inline void Swap(C_JUMP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_JUMP* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_JUMP* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_JUMP>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const C_JUMP& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const C_JUMP& from) {
    C_JUMP::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(C_JUMP* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Protocol.C_JUMP";
  }
  protected:
  explicit C_JUMP(::google::protobuf::Arena* arena);
  C_JUMP(::google::protobuf::Arena* arena, const C_JUMP& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // .Protocol.CreatureState state = 1;
  bool has_state() const;
  void clear_state() ;
  const ::Protocol::CreatureState& state() const;
  PROTOBUF_NODISCARD ::Protocol::CreatureState* release_state();
  ::Protocol::CreatureState* mutable_state();
  void set_allocated_state(::Protocol::CreatureState* value);
  void unsafe_arena_set_allocated_state(::Protocol::CreatureState* value);
  ::Protocol::CreatureState* unsafe_arena_release_state();

  private:
  const ::Protocol::CreatureState& _internal_state() const;
  ::Protocol::CreatureState* _internal_mutable_state();

  public:
  // @@protoc_insertion_point(class_scope:Protocol.C_JUMP)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::Protocol::CreatureState* state_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class S_ENTER_MAP final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ENTER_MAP) */ {
 public:
  inline S_ENTER_MAP() : S_ENTER_MAP(nullptr) {}
  ~S_ENTER_MAP() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR S_ENTER_MAP(::google::protobuf::internal::ConstantInitialized);

  inline S_ENTER_MAP(const S_ENTER_MAP& from)
      : S_ENTER_MAP(nullptr, from) {}
  S_ENTER_MAP(S_ENTER_MAP&& from) noexcept
    : S_ENTER_MAP() {
    *this = ::std::move(from);
  }

  inline S_ENTER_MAP& operator=(const S_ENTER_MAP& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ENTER_MAP& operator=(S_ENTER_MAP&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ENTER_MAP& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ENTER_MAP* internal_default_instance() {
    return reinterpret_cast<const S_ENTER_MAP*>(
               &_S_ENTER_MAP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(S_ENTER_MAP& a, S_ENTER_MAP& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ENTER_MAP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ENTER_MAP* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ENTER_MAP* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ENTER_MAP>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const S_ENTER_MAP& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const S_ENTER_MAP& from) {
    S_ENTER_MAP::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(S_ENTER_MAP* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Protocol.S_ENTER_MAP";
  }
  protected:
  explicit S_ENTER_MAP(::google::protobuf::Arena* arena);
  S_ENTER_MAP(::google::protobuf::Arena* arena, const S_ENTER_MAP& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
  };
  // .Protocol.Player player = 1;
  bool has_player() const;
  void clear_player() ;
  const ::Protocol::Player& player() const;
  PROTOBUF_NODISCARD ::Protocol::Player* release_player();
  ::Protocol::Player* mutable_player();
  void set_allocated_player(::Protocol::Player* value);
  void unsafe_arena_set_allocated_player(::Protocol::Player* value);
  ::Protocol::Player* unsafe_arena_release_player();

  private:
  const ::Protocol::Player& _internal_player() const;
  ::Protocol::Player* _internal_mutable_player();

  public:
  // @@protoc_insertion_point(class_scope:Protocol.S_ENTER_MAP)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::Protocol::Player* player_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};// -------------------------------------------------------------------

class S_ENTER final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ENTER) */ {
 public:
  inline S_ENTER() : S_ENTER(nullptr) {}
  ~S_ENTER() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR S_ENTER(::google::protobuf::internal::ConstantInitialized);

  inline S_ENTER(const S_ENTER& from)
      : S_ENTER(nullptr, from) {}
  S_ENTER(S_ENTER&& from) noexcept
    : S_ENTER() {
    *this = ::std::move(from);
  }

  inline S_ENTER& operator=(const S_ENTER& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ENTER& operator=(S_ENTER&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ENTER& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ENTER* internal_default_instance() {
    return reinterpret_cast<const S_ENTER*>(
               &_S_ENTER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S_ENTER& a, S_ENTER& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ENTER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ENTER* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ENTER* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ENTER>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const S_ENTER& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const S_ENTER& from) {
    S_ENTER::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(S_ENTER* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Protocol.S_ENTER";
  }
  protected:
  explicit S_ENTER(::google::protobuf::Arena* arena);
  S_ENTER(::google::protobuf::Arena* arena, const S_ENTER& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 3,
    kMyPlayerFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // repeated .Protocol.Player players = 3;
  int players_size() const;
  private:
  int _internal_players_size() const;

  public:
  void clear_players() ;
  ::Protocol::Player* mutable_players(int index);
  ::google::protobuf::RepeatedPtrField< ::Protocol::Player >*
      mutable_players();
  private:
  const ::google::protobuf::RepeatedPtrField<::Protocol::Player>& _internal_players() const;
  ::google::protobuf::RepeatedPtrField<::Protocol::Player>* _internal_mutable_players();
  public:
  const ::Protocol::Player& players(int index) const;
  ::Protocol::Player* add_players();
  const ::google::protobuf::RepeatedPtrField< ::Protocol::Player >&
      players() const;
  // .Protocol.Player myPlayer = 2;
  bool has_myplayer() const;
  void clear_myplayer() ;
  const ::Protocol::Player& myplayer() const;
  PROTOBUF_NODISCARD ::Protocol::Player* release_myplayer();
  ::Protocol::Player* mutable_myplayer();
  void set_allocated_myplayer(::Protocol::Player* value);
  void unsafe_arena_set_allocated_myplayer(::Protocol::Player* value);
  ::Protocol::Player* unsafe_arena_release_myplayer();

  private:
  const ::Protocol::Player& _internal_myplayer() const;
  ::Protocol::Player* _internal_mutable_myplayer();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:Protocol.S_ENTER)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::Protocol::Player > players_;
    ::Protocol::Player* myplayer_;
    bool success_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// C_CHAT

// string msg = 1;
inline void C_CHAT::clear_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& C_CHAT::msg() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Protocol.C_CHAT.msg)
  return _internal_msg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void C_CHAT::set_msg(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.msg_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Protocol.C_CHAT.msg)
}
inline std::string* C_CHAT::mutable_msg() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Protocol.C_CHAT.msg)
  return _s;
}
inline const std::string& C_CHAT::_internal_msg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.msg_.Get();
}
inline void C_CHAT::_internal_set_msg(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.msg_.Set(value, GetArena());
}
inline std::string* C_CHAT::_internal_mutable_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.msg_.Mutable( GetArena());
}
inline std::string* C_CHAT::release_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Protocol.C_CHAT.msg)
  return _impl_.msg_.Release();
}
inline void C_CHAT::set_allocated_msg(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msg_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.msg_.IsDefault()) {
          _impl_.msg_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_CHAT.msg)
}

// -------------------------------------------------------------------

// S_CHAT

// bool success = 1;
inline void S_CHAT::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool S_CHAT::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHAT.success)
  return _internal_success();
}
inline void S_CHAT::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CHAT.success)
}
inline bool S_CHAT::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void S_CHAT::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// string msg = 2;
inline void S_CHAT::clear_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& S_CHAT::msg() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Protocol.S_CHAT.msg)
  return _internal_msg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void S_CHAT::set_msg(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.msg_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Protocol.S_CHAT.msg)
}
inline std::string* S_CHAT::mutable_msg() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Protocol.S_CHAT.msg)
  return _s;
}
inline const std::string& S_CHAT::_internal_msg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.msg_.Get();
}
inline void S_CHAT::_internal_set_msg(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.msg_.Set(value, GetArena());
}
inline std::string* S_CHAT::_internal_mutable_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.msg_.Mutable( GetArena());
}
inline std::string* S_CHAT::release_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Protocol.S_CHAT.msg)
  return _impl_.msg_.Release();
}
inline void S_CHAT::set_allocated_msg(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msg_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.msg_.IsDefault()) {
          _impl_.msg_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CHAT.msg)
}

// -------------------------------------------------------------------

// C_LOGIN

// string id = 1;
inline void C_LOGIN::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& C_LOGIN::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Protocol.C_LOGIN.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void C_LOGIN::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Protocol.C_LOGIN.id)
}
inline std::string* C_LOGIN::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Protocol.C_LOGIN.id)
  return _s;
}
inline const std::string& C_LOGIN::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void C_LOGIN::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* C_LOGIN::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* C_LOGIN::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Protocol.C_LOGIN.id)
  return _impl_.id_.Release();
}
inline void C_LOGIN::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_LOGIN.id)
}

// string pw = 2;
inline void C_LOGIN::clear_pw() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pw_.ClearToEmpty();
}
inline const std::string& C_LOGIN::pw() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Protocol.C_LOGIN.pw)
  return _internal_pw();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void C_LOGIN::set_pw(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pw_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Protocol.C_LOGIN.pw)
}
inline std::string* C_LOGIN::mutable_pw() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_pw();
  // @@protoc_insertion_point(field_mutable:Protocol.C_LOGIN.pw)
  return _s;
}
inline const std::string& C_LOGIN::_internal_pw() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pw_.Get();
}
inline void C_LOGIN::_internal_set_pw(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pw_.Set(value, GetArena());
}
inline std::string* C_LOGIN::_internal_mutable_pw() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.pw_.Mutable( GetArena());
}
inline std::string* C_LOGIN::release_pw() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Protocol.C_LOGIN.pw)
  return _impl_.pw_.Release();
}
inline void C_LOGIN::set_allocated_pw(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pw_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.pw_.IsDefault()) {
          _impl_.pw_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_LOGIN.pw)
}

// -------------------------------------------------------------------

// S_LOGIN

// bool success = 1;
inline void S_LOGIN::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool S_LOGIN::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.success)
  return _internal_success();
}
inline void S_LOGIN::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LOGIN.success)
}
inline bool S_LOGIN::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void S_LOGIN::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// repeated .Protocol.CharacterInfo chracters = 2;
inline int S_LOGIN::_internal_chracters_size() const {
  return _internal_chracters().size();
}
inline int S_LOGIN::chracters_size() const {
  return _internal_chracters_size();
}
inline ::Protocol::CharacterInfo* S_LOGIN::mutable_chracters(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:Protocol.S_LOGIN.chracters)
  return _internal_mutable_chracters()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::Protocol::CharacterInfo>* S_LOGIN::mutable_chracters()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_LOGIN.chracters)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_chracters();
}
inline const ::Protocol::CharacterInfo& S_LOGIN::chracters(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.chracters)
  return _internal_chracters().Get(index);
}
inline ::Protocol::CharacterInfo* S_LOGIN::add_chracters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Protocol::CharacterInfo* _add = _internal_mutable_chracters()->Add();
  // @@protoc_insertion_point(field_add:Protocol.S_LOGIN.chracters)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::Protocol::CharacterInfo>& S_LOGIN::chracters() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:Protocol.S_LOGIN.chracters)
  return _internal_chracters();
}
inline const ::google::protobuf::RepeatedPtrField<::Protocol::CharacterInfo>&
S_LOGIN::_internal_chracters() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.chracters_;
}
inline ::google::protobuf::RepeatedPtrField<::Protocol::CharacterInfo>*
S_LOGIN::_internal_mutable_chracters() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.chracters_;
}

// -------------------------------------------------------------------

// C_ENTER

// uint64 characterId = 1;
inline void C_ENTER::clear_characterid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.characterid_ = ::uint64_t{0u};
}
inline ::uint64_t C_ENTER::characterid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ENTER.characterId)
  return _internal_characterid();
}
inline void C_ENTER::set_characterid(::uint64_t value) {
  _internal_set_characterid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ENTER.characterId)
}
inline ::uint64_t C_ENTER::_internal_characterid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.characterid_;
}
inline void C_ENTER::_internal_set_characterid(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.characterid_ = value;
}

// -------------------------------------------------------------------

// S_ENTER

// bool success = 1;
inline void S_ENTER::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool S_ENTER::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENTER.success)
  return _internal_success();
}
inline void S_ENTER::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ENTER.success)
}
inline bool S_ENTER::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void S_ENTER::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// .Protocol.Player myPlayer = 2;
inline bool S_ENTER::has_myplayer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.myplayer_ != nullptr);
  return value;
}
inline const ::Protocol::Player& S_ENTER::_internal_myplayer() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Protocol::Player* p = _impl_.myplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Player&>(::Protocol::_Player_default_instance_);
}
inline const ::Protocol::Player& S_ENTER::myplayer() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Protocol.S_ENTER.myPlayer)
  return _internal_myplayer();
}
inline void S_ENTER::unsafe_arena_set_allocated_myplayer(::Protocol::Player* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.myplayer_);
  }
  _impl_.myplayer_ = reinterpret_cast<::Protocol::Player*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ENTER.myPlayer)
}
inline ::Protocol::Player* S_ENTER::release_myplayer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Protocol::Player* released = _impl_.myplayer_;
  _impl_.myplayer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Protocol::Player* S_ENTER::unsafe_arena_release_myplayer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Protocol.S_ENTER.myPlayer)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Protocol::Player* temp = _impl_.myplayer_;
  _impl_.myplayer_ = nullptr;
  return temp;
}
inline ::Protocol::Player* S_ENTER::_internal_mutable_myplayer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.myplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Player>(GetArena());
    _impl_.myplayer_ = reinterpret_cast<::Protocol::Player*>(p);
  }
  return _impl_.myplayer_;
}
inline ::Protocol::Player* S_ENTER::mutable_myplayer() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::Protocol::Player* _msg = _internal_mutable_myplayer();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ENTER.myPlayer)
  return _msg;
}
inline void S_ENTER::set_allocated_myplayer(::Protocol::Player* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.myplayer_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.myplayer_ = reinterpret_cast<::Protocol::Player*>(value);
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ENTER.myPlayer)
}

// repeated .Protocol.Player players = 3;
inline int S_ENTER::_internal_players_size() const {
  return _internal_players().size();
}
inline int S_ENTER::players_size() const {
  return _internal_players_size();
}
inline ::Protocol::Player* S_ENTER::mutable_players(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:Protocol.S_ENTER.players)
  return _internal_mutable_players()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::Protocol::Player>* S_ENTER::mutable_players()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_ENTER.players)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_players();
}
inline const ::Protocol::Player& S_ENTER::players(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Protocol.S_ENTER.players)
  return _internal_players().Get(index);
}
inline ::Protocol::Player* S_ENTER::add_players() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Protocol::Player* _add = _internal_mutable_players()->Add();
  // @@protoc_insertion_point(field_add:Protocol.S_ENTER.players)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::Protocol::Player>& S_ENTER::players() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:Protocol.S_ENTER.players)
  return _internal_players();
}
inline const ::google::protobuf::RepeatedPtrField<::Protocol::Player>&
S_ENTER::_internal_players() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.players_;
}
inline ::google::protobuf::RepeatedPtrField<::Protocol::Player>*
S_ENTER::_internal_mutable_players() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.players_;
}

// -------------------------------------------------------------------

// C_LEAVE

// -------------------------------------------------------------------

// S_ENTER_MAP

// .Protocol.Player player = 1;
inline bool S_ENTER_MAP::has_player() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.player_ != nullptr);
  return value;
}
inline const ::Protocol::Player& S_ENTER_MAP::_internal_player() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Protocol::Player* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Player&>(::Protocol::_Player_default_instance_);
}
inline const ::Protocol::Player& S_ENTER_MAP::player() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Protocol.S_ENTER_MAP.player)
  return _internal_player();
}
inline void S_ENTER_MAP::unsafe_arena_set_allocated_player(::Protocol::Player* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = reinterpret_cast<::Protocol::Player*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ENTER_MAP.player)
}
inline ::Protocol::Player* S_ENTER_MAP::release_player() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Protocol::Player* released = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Protocol::Player* S_ENTER_MAP::unsafe_arena_release_player() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Protocol.S_ENTER_MAP.player)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::Protocol::Player* S_ENTER_MAP::_internal_mutable_player() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Player>(GetArena());
    _impl_.player_ = reinterpret_cast<::Protocol::Player*>(p);
  }
  return _impl_.player_;
}
inline ::Protocol::Player* S_ENTER_MAP::mutable_player() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::Protocol::Player* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ENTER_MAP.player)
  return _msg;
}
inline void S_ENTER_MAP::set_allocated_player(::Protocol::Player* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.player_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.player_ = reinterpret_cast<::Protocol::Player*>(value);
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ENTER_MAP.player)
}

// -------------------------------------------------------------------

// S_LEAVE

// uint64 playerId = 1;
inline void S_LEAVE::clear_playerid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.playerid_ = ::uint64_t{0u};
}
inline ::uint64_t S_LEAVE::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LEAVE.playerId)
  return _internal_playerid();
}
inline void S_LEAVE::set_playerid(::uint64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LEAVE.playerId)
}
inline ::uint64_t S_LEAVE::_internal_playerid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.playerid_;
}
inline void S_LEAVE::_internal_set_playerid(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.playerid_ = value;
}

// -------------------------------------------------------------------

// C_MOVE_START

// .Protocol.CreatureState state = 1;
inline bool C_MOVE_START::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.state_ != nullptr);
  return value;
}
inline const ::Protocol::CreatureState& C_MOVE_START::_internal_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Protocol::CreatureState* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::CreatureState&>(::Protocol::_CreatureState_default_instance_);
}
inline const ::Protocol::CreatureState& C_MOVE_START::state() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Protocol.C_MOVE_START.state)
  return _internal_state();
}
inline void C_MOVE_START::unsafe_arena_set_allocated_state(::Protocol::CreatureState* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = reinterpret_cast<::Protocol::CreatureState*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_MOVE_START.state)
}
inline ::Protocol::CreatureState* C_MOVE_START::release_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Protocol::CreatureState* released = _impl_.state_;
  _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Protocol::CreatureState* C_MOVE_START::unsafe_arena_release_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Protocol.C_MOVE_START.state)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Protocol::CreatureState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::Protocol::CreatureState* C_MOVE_START::_internal_mutable_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.state_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::CreatureState>(GetArena());
    _impl_.state_ = reinterpret_cast<::Protocol::CreatureState*>(p);
  }
  return _impl_.state_;
}
inline ::Protocol::CreatureState* C_MOVE_START::mutable_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::Protocol::CreatureState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:Protocol.C_MOVE_START.state)
  return _msg;
}
inline void C_MOVE_START::set_allocated_state(::Protocol::CreatureState* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.state_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.state_ = reinterpret_cast<::Protocol::CreatureState*>(value);
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_MOVE_START.state)
}

// -------------------------------------------------------------------

// S_MOVE_START

// uint64 playerId = 1;
inline void S_MOVE_START::clear_playerid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.playerid_ = ::uint64_t{0u};
}
inline ::uint64_t S_MOVE_START::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MOVE_START.playerId)
  return _internal_playerid();
}
inline void S_MOVE_START::set_playerid(::uint64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MOVE_START.playerId)
}
inline ::uint64_t S_MOVE_START::_internal_playerid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.playerid_;
}
inline void S_MOVE_START::_internal_set_playerid(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.playerid_ = value;
}

// .Protocol.CreatureState state = 2;
inline bool S_MOVE_START::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.state_ != nullptr);
  return value;
}
inline const ::Protocol::CreatureState& S_MOVE_START::_internal_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Protocol::CreatureState* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::CreatureState&>(::Protocol::_CreatureState_default_instance_);
}
inline const ::Protocol::CreatureState& S_MOVE_START::state() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Protocol.S_MOVE_START.state)
  return _internal_state();
}
inline void S_MOVE_START::unsafe_arena_set_allocated_state(::Protocol::CreatureState* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = reinterpret_cast<::Protocol::CreatureState*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_MOVE_START.state)
}
inline ::Protocol::CreatureState* S_MOVE_START::release_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Protocol::CreatureState* released = _impl_.state_;
  _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Protocol::CreatureState* S_MOVE_START::unsafe_arena_release_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Protocol.S_MOVE_START.state)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Protocol::CreatureState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::Protocol::CreatureState* S_MOVE_START::_internal_mutable_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.state_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::CreatureState>(GetArena());
    _impl_.state_ = reinterpret_cast<::Protocol::CreatureState*>(p);
  }
  return _impl_.state_;
}
inline ::Protocol::CreatureState* S_MOVE_START::mutable_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::Protocol::CreatureState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:Protocol.S_MOVE_START.state)
  return _msg;
}
inline void S_MOVE_START::set_allocated_state(::Protocol::CreatureState* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.state_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.state_ = reinterpret_cast<::Protocol::CreatureState*>(value);
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_MOVE_START.state)
}

// -------------------------------------------------------------------

// C_MOVE_END

// .Protocol.CreatureState state = 1;
inline bool C_MOVE_END::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.state_ != nullptr);
  return value;
}
inline const ::Protocol::CreatureState& C_MOVE_END::_internal_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Protocol::CreatureState* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::CreatureState&>(::Protocol::_CreatureState_default_instance_);
}
inline const ::Protocol::CreatureState& C_MOVE_END::state() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Protocol.C_MOVE_END.state)
  return _internal_state();
}
inline void C_MOVE_END::unsafe_arena_set_allocated_state(::Protocol::CreatureState* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = reinterpret_cast<::Protocol::CreatureState*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_MOVE_END.state)
}
inline ::Protocol::CreatureState* C_MOVE_END::release_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Protocol::CreatureState* released = _impl_.state_;
  _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Protocol::CreatureState* C_MOVE_END::unsafe_arena_release_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Protocol.C_MOVE_END.state)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Protocol::CreatureState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::Protocol::CreatureState* C_MOVE_END::_internal_mutable_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.state_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::CreatureState>(GetArena());
    _impl_.state_ = reinterpret_cast<::Protocol::CreatureState*>(p);
  }
  return _impl_.state_;
}
inline ::Protocol::CreatureState* C_MOVE_END::mutable_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::Protocol::CreatureState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:Protocol.C_MOVE_END.state)
  return _msg;
}
inline void C_MOVE_END::set_allocated_state(::Protocol::CreatureState* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.state_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.state_ = reinterpret_cast<::Protocol::CreatureState*>(value);
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_MOVE_END.state)
}

// -------------------------------------------------------------------

// S_MOVE_END

// uint64 playerId = 1;
inline void S_MOVE_END::clear_playerid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.playerid_ = ::uint64_t{0u};
}
inline ::uint64_t S_MOVE_END::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MOVE_END.playerId)
  return _internal_playerid();
}
inline void S_MOVE_END::set_playerid(::uint64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MOVE_END.playerId)
}
inline ::uint64_t S_MOVE_END::_internal_playerid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.playerid_;
}
inline void S_MOVE_END::_internal_set_playerid(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.playerid_ = value;
}

// .Protocol.CreatureState state = 2;
inline bool S_MOVE_END::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.state_ != nullptr);
  return value;
}
inline const ::Protocol::CreatureState& S_MOVE_END::_internal_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Protocol::CreatureState* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::CreatureState&>(::Protocol::_CreatureState_default_instance_);
}
inline const ::Protocol::CreatureState& S_MOVE_END::state() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Protocol.S_MOVE_END.state)
  return _internal_state();
}
inline void S_MOVE_END::unsafe_arena_set_allocated_state(::Protocol::CreatureState* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = reinterpret_cast<::Protocol::CreatureState*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_MOVE_END.state)
}
inline ::Protocol::CreatureState* S_MOVE_END::release_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Protocol::CreatureState* released = _impl_.state_;
  _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Protocol::CreatureState* S_MOVE_END::unsafe_arena_release_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Protocol.S_MOVE_END.state)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Protocol::CreatureState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::Protocol::CreatureState* S_MOVE_END::_internal_mutable_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.state_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::CreatureState>(GetArena());
    _impl_.state_ = reinterpret_cast<::Protocol::CreatureState*>(p);
  }
  return _impl_.state_;
}
inline ::Protocol::CreatureState* S_MOVE_END::mutable_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::Protocol::CreatureState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:Protocol.S_MOVE_END.state)
  return _msg;
}
inline void S_MOVE_END::set_allocated_state(::Protocol::CreatureState* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.state_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.state_ = reinterpret_cast<::Protocol::CreatureState*>(value);
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_MOVE_END.state)
}

// -------------------------------------------------------------------

// C_JUMP

// .Protocol.CreatureState state = 1;
inline bool C_JUMP::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.state_ != nullptr);
  return value;
}
inline const ::Protocol::CreatureState& C_JUMP::_internal_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Protocol::CreatureState* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::CreatureState&>(::Protocol::_CreatureState_default_instance_);
}
inline const ::Protocol::CreatureState& C_JUMP::state() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Protocol.C_JUMP.state)
  return _internal_state();
}
inline void C_JUMP::unsafe_arena_set_allocated_state(::Protocol::CreatureState* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = reinterpret_cast<::Protocol::CreatureState*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_JUMP.state)
}
inline ::Protocol::CreatureState* C_JUMP::release_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Protocol::CreatureState* released = _impl_.state_;
  _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Protocol::CreatureState* C_JUMP::unsafe_arena_release_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Protocol.C_JUMP.state)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Protocol::CreatureState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::Protocol::CreatureState* C_JUMP::_internal_mutable_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.state_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::CreatureState>(GetArena());
    _impl_.state_ = reinterpret_cast<::Protocol::CreatureState*>(p);
  }
  return _impl_.state_;
}
inline ::Protocol::CreatureState* C_JUMP::mutable_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::Protocol::CreatureState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:Protocol.C_JUMP.state)
  return _msg;
}
inline void C_JUMP::set_allocated_state(::Protocol::CreatureState* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.state_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.state_ = reinterpret_cast<::Protocol::CreatureState*>(value);
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_JUMP.state)
}

// -------------------------------------------------------------------

// S_JUMP

// bool success = 1;
inline void S_JUMP::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool S_JUMP::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_JUMP.success)
  return _internal_success();
}
inline void S_JUMP::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_JUMP.success)
}
inline bool S_JUMP::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void S_JUMP::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// uint64 playerId = 2;
inline void S_JUMP::clear_playerid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.playerid_ = ::uint64_t{0u};
}
inline ::uint64_t S_JUMP::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_JUMP.playerId)
  return _internal_playerid();
}
inline void S_JUMP::set_playerid(::uint64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_JUMP.playerId)
}
inline ::uint64_t S_JUMP::_internal_playerid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.playerid_;
}
inline void S_JUMP::_internal_set_playerid(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.playerid_ = value;
}

// .Protocol.CreatureState state = 3;
inline bool S_JUMP::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.state_ != nullptr);
  return value;
}
inline const ::Protocol::CreatureState& S_JUMP::_internal_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Protocol::CreatureState* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::CreatureState&>(::Protocol::_CreatureState_default_instance_);
}
inline const ::Protocol::CreatureState& S_JUMP::state() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Protocol.S_JUMP.state)
  return _internal_state();
}
inline void S_JUMP::unsafe_arena_set_allocated_state(::Protocol::CreatureState* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = reinterpret_cast<::Protocol::CreatureState*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_JUMP.state)
}
inline ::Protocol::CreatureState* S_JUMP::release_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Protocol::CreatureState* released = _impl_.state_;
  _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Protocol::CreatureState* S_JUMP::unsafe_arena_release_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Protocol.S_JUMP.state)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Protocol::CreatureState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::Protocol::CreatureState* S_JUMP::_internal_mutable_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.state_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::CreatureState>(GetArena());
    _impl_.state_ = reinterpret_cast<::Protocol::CreatureState*>(p);
  }
  return _impl_.state_;
}
inline ::Protocol::CreatureState* S_JUMP::mutable_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::Protocol::CreatureState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:Protocol.S_JUMP.state)
  return _msg;
}
inline void S_JUMP::set_allocated_state(::Protocol::CreatureState* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.state_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.state_ = reinterpret_cast<::Protocol::CreatureState*>(value);
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_JUMP.state)
}

// -------------------------------------------------------------------

// C_JUMP_END

// .Protocol.CreatureState state = 1;
inline bool C_JUMP_END::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.state_ != nullptr);
  return value;
}
inline const ::Protocol::CreatureState& C_JUMP_END::_internal_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Protocol::CreatureState* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::CreatureState&>(::Protocol::_CreatureState_default_instance_);
}
inline const ::Protocol::CreatureState& C_JUMP_END::state() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Protocol.C_JUMP_END.state)
  return _internal_state();
}
inline void C_JUMP_END::unsafe_arena_set_allocated_state(::Protocol::CreatureState* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = reinterpret_cast<::Protocol::CreatureState*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_JUMP_END.state)
}
inline ::Protocol::CreatureState* C_JUMP_END::release_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Protocol::CreatureState* released = _impl_.state_;
  _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Protocol::CreatureState* C_JUMP_END::unsafe_arena_release_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Protocol.C_JUMP_END.state)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Protocol::CreatureState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::Protocol::CreatureState* C_JUMP_END::_internal_mutable_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.state_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::CreatureState>(GetArena());
    _impl_.state_ = reinterpret_cast<::Protocol::CreatureState*>(p);
  }
  return _impl_.state_;
}
inline ::Protocol::CreatureState* C_JUMP_END::mutable_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::Protocol::CreatureState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:Protocol.C_JUMP_END.state)
  return _msg;
}
inline void C_JUMP_END::set_allocated_state(::Protocol::CreatureState* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.state_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.state_ = reinterpret_cast<::Protocol::CreatureState*>(value);
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_JUMP_END.state)
}

// -------------------------------------------------------------------

// S_JUMP_END

// uint64 playerId = 1;
inline void S_JUMP_END::clear_playerid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.playerid_ = ::uint64_t{0u};
}
inline ::uint64_t S_JUMP_END::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_JUMP_END.playerId)
  return _internal_playerid();
}
inline void S_JUMP_END::set_playerid(::uint64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_JUMP_END.playerId)
}
inline ::uint64_t S_JUMP_END::_internal_playerid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.playerid_;
}
inline void S_JUMP_END::_internal_set_playerid(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.playerid_ = value;
}

// .Protocol.CreatureState state = 2;
inline bool S_JUMP_END::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.state_ != nullptr);
  return value;
}
inline const ::Protocol::CreatureState& S_JUMP_END::_internal_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Protocol::CreatureState* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::CreatureState&>(::Protocol::_CreatureState_default_instance_);
}
inline const ::Protocol::CreatureState& S_JUMP_END::state() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Protocol.S_JUMP_END.state)
  return _internal_state();
}
inline void S_JUMP_END::unsafe_arena_set_allocated_state(::Protocol::CreatureState* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = reinterpret_cast<::Protocol::CreatureState*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_JUMP_END.state)
}
inline ::Protocol::CreatureState* S_JUMP_END::release_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Protocol::CreatureState* released = _impl_.state_;
  _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Protocol::CreatureState* S_JUMP_END::unsafe_arena_release_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Protocol.S_JUMP_END.state)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Protocol::CreatureState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::Protocol::CreatureState* S_JUMP_END::_internal_mutable_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.state_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::CreatureState>(GetArena());
    _impl_.state_ = reinterpret_cast<::Protocol::CreatureState*>(p);
  }
  return _impl_.state_;
}
inline ::Protocol::CreatureState* S_JUMP_END::mutable_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::Protocol::CreatureState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:Protocol.S_JUMP_END.state)
  return _msg;
}
inline void S_JUMP_END::set_allocated_state(::Protocol::CreatureState* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.state_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.state_ = reinterpret_cast<::Protocol::CreatureState*>(value);
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_JUMP_END.state)
}

// -------------------------------------------------------------------

// C_SKILL

// .Protocol.CreatureState state = 1;
inline bool C_SKILL::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.state_ != nullptr);
  return value;
}
inline const ::Protocol::CreatureState& C_SKILL::_internal_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Protocol::CreatureState* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::CreatureState&>(::Protocol::_CreatureState_default_instance_);
}
inline const ::Protocol::CreatureState& C_SKILL::state() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Protocol.C_SKILL.state)
  return _internal_state();
}
inline void C_SKILL::unsafe_arena_set_allocated_state(::Protocol::CreatureState* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = reinterpret_cast<::Protocol::CreatureState*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_SKILL.state)
}
inline ::Protocol::CreatureState* C_SKILL::release_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Protocol::CreatureState* released = _impl_.state_;
  _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Protocol::CreatureState* C_SKILL::unsafe_arena_release_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Protocol.C_SKILL.state)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Protocol::CreatureState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::Protocol::CreatureState* C_SKILL::_internal_mutable_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.state_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::CreatureState>(GetArena());
    _impl_.state_ = reinterpret_cast<::Protocol::CreatureState*>(p);
  }
  return _impl_.state_;
}
inline ::Protocol::CreatureState* C_SKILL::mutable_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::Protocol::CreatureState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:Protocol.C_SKILL.state)
  return _msg;
}
inline void C_SKILL::set_allocated_state(::Protocol::CreatureState* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.state_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.state_ = reinterpret_cast<::Protocol::CreatureState*>(value);
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_SKILL.state)
}

// -------------------------------------------------------------------

// S_SKILL

// bool success = 1;
inline void S_SKILL::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool S_SKILL::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SKILL.success)
  return _internal_success();
}
inline void S_SKILL::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SKILL.success)
}
inline bool S_SKILL::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void S_SKILL::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// uint64 playerId = 2;
inline void S_SKILL::clear_playerid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.playerid_ = ::uint64_t{0u};
}
inline ::uint64_t S_SKILL::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SKILL.playerId)
  return _internal_playerid();
}
inline void S_SKILL::set_playerid(::uint64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SKILL.playerId)
}
inline ::uint64_t S_SKILL::_internal_playerid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.playerid_;
}
inline void S_SKILL::_internal_set_playerid(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.playerid_ = value;
}

// .Protocol.CreatureState state = 3;
inline bool S_SKILL::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.state_ != nullptr);
  return value;
}
inline const ::Protocol::CreatureState& S_SKILL::_internal_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Protocol::CreatureState* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::CreatureState&>(::Protocol::_CreatureState_default_instance_);
}
inline const ::Protocol::CreatureState& S_SKILL::state() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Protocol.S_SKILL.state)
  return _internal_state();
}
inline void S_SKILL::unsafe_arena_set_allocated_state(::Protocol::CreatureState* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = reinterpret_cast<::Protocol::CreatureState*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_SKILL.state)
}
inline ::Protocol::CreatureState* S_SKILL::release_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Protocol::CreatureState* released = _impl_.state_;
  _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Protocol::CreatureState* S_SKILL::unsafe_arena_release_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Protocol.S_SKILL.state)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Protocol::CreatureState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::Protocol::CreatureState* S_SKILL::_internal_mutable_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.state_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::CreatureState>(GetArena());
    _impl_.state_ = reinterpret_cast<::Protocol::CreatureState*>(p);
  }
  return _impl_.state_;
}
inline ::Protocol::CreatureState* S_SKILL::mutable_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::Protocol::CreatureState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:Protocol.S_SKILL.state)
  return _msg;
}
inline void S_SKILL::set_allocated_state(::Protocol::CreatureState* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.state_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.state_ = reinterpret_cast<::Protocol::CreatureState*>(value);
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SKILL.state)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto_2epb_2eh
